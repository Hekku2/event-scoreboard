{"version":3,"sources":["webpack:///src/environments/environment.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/series-results/series-result.component.ts","webpack:///src/app/series-results/series-result.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/shared/services/index.ts","webpack:///src/app/current-competitor/current-competitor.component.html","webpack:///src/app/current-competitor/current-competitor.component.ts","webpack:///src/app/shared/services/score.service.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/shared/services/config.service.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["environment","production","AppComponent","scoreService","configService","subscription","title","selectedIndex","loadedResults","updateConfiguration","currentConfig","subscribe","config","updateScores","advanceSeries","add","seriesChangeTime","n","backgroundUpdateTime","selectedSeries","undefined","listenForScoreboardChanges","unsubscribe","getCurrentScoreboard","all","forEach","resultDto","match","find","s","seriesName","results","push","console","log","length","SeriesResultComponent","showResults","getCurrentCompetitor","pipe","m","isActive","AppModule","CurrentCompetitorComponent","currentResult","ScoreService","http","currentCompetitor","currentScoreboard","asObservable","get","rawResult","allSeries","next","routes","AppRoutingModule","forRoot","ConfigService","configLocation","configRaw","bootstrapModule","err","error","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id"],"mappings":"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","file":"main-es5.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription, timer } from 'rxjs';\nimport { CurrentResult, SeriesScores } from './shared/interfaces';\nimport { ConfigService, ScoreService } from './shared/services';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  private subscription: Subscription = new Subscription();\n\n  title = 'event-scoreboard';\n\n  selectedIndex: number = 0;\n  selectedSeries: SeriesScores | undefined;\n  currentCompetitor: CurrentResult | undefined;\n\n  loadedResults: SeriesScores[] = [];\n\n  constructor(private scoreService: ScoreService, private configService: ConfigService) { }\n\n  ngOnInit(): void {\n\n    this.configService.updateConfiguration();\n\n    this.configService.currentConfig.subscribe(config => {\n      this.scoreService.updateScores();\n      this.advanceSeries();\n      this.subscription.add(timer(0, config.seriesChangeTime).subscribe(n => this.advanceSeries()));\n      this.subscription.add(timer(0, config.backgroundUpdateTime).subscribe(n => this.scoreService.updateScores()));\n    });\n\n    this.selectedSeries = undefined;\n\n    this.listenForScoreboardChanges();\n  }\n\n  public ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  private listenForScoreboardChanges() {\n    this.scoreService.getCurrentScoreboard().subscribe(all => {\n      all.forEach(resultDto => {\n        const match = this.loadedResults.find(s => s.seriesName === resultDto.seriesName)\n        if (match) {\n          match.results = resultDto.results;\n        } else {\n          this.loadedResults.push(resultDto);\n        }\n      });\n    });\n  }\n\n  advanceSeries() {\n    console.log('Advancing');\n    if (this.loadedResults.length === 0) {\n      console.log('No results found.');\n      this.selectedSeries = undefined;\n      return;\n    }\n    this.selectedIndex = (this.selectedIndex + 1) % this.loadedResults.length;\n    this.selectedSeries = this.loadedResults[this.selectedIndex];\n  }\n\n}\n","<app-series-result [result]=\"selectedSeries\"></app-series-result>\n\n<app-current-competitor></app-current-competitor>\n","import { Component, Input } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SeriesScores } from '../shared/interfaces';\nimport { ScoreService } from '../shared/services';\n\n@Component({\n    selector: 'app-series-result',\n    templateUrl: './series-result.component.html',\n    styleUrls: ['./series-result.component.scss']\n})\nexport class SeriesResultComponent {\n    public showResults: Observable<boolean>;\n\n    @Input() result: SeriesScores | undefined;\n\n    public constructor(private scoreService: ScoreService) {\n        this.showResults = this.scoreService.getCurrentCompetitor().pipe(map(m => !m || !m.isActive));\n    }\n}\n","<div *ngIf=\"(showResults | async)\" class=\"results\">\n    <h1>{{result?.seriesName}}</h1>\n\n    <li *ngFor=\"let resultRow of result?.results\">\n        {{resultRow}}\n    </li>\n\n</div>\n","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CurrentCompetitorComponent } from './current-competitor/current-competitor.component';\nimport { SeriesResultComponent } from './series-results/series-result.component';\nimport { ConfigService } from './shared/services/config.service';\nimport { ScoreService } from './shared/services/score.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SeriesResultComponent,\n    CurrentCompetitorComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule\n  ],\n  providers: [\n    ScoreService,\n    ConfigService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export * from 'src/app/shared/services/config.service';\nexport * from 'src/app/shared/services/score.service';\n","<div *ngIf=\"(currentResult | async)?.isActive\">\n    <h2>\n        {{(currentResult | async)?.seriesName}}\n    </h2>\n    <h2 *ngFor=\"let resultRow of (currentResult | async)?.participants\">\n        {{resultRow}}\n    </h2>\n    <h2>\n        {{(currentResult | async)?.team}}\n    </h2>\n    <h2>\n        {{(currentResult | async)?.score}}\n    </h2>\n\n</div>\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CurrentResult } from '../shared/interfaces';\nimport { ScoreService } from '../shared/services';\n\n@Component({\n    selector: 'app-current-competitor',\n    templateUrl: './current-competitor.component.html',\n    styleUrls: ['current-competitor.component.scss']\n})\nexport class CurrentCompetitorComponent {\n    public currentResult: Observable<CurrentResult>;\n\n    public constructor(private scoreService: ScoreService) {\n        this.currentResult = this.scoreService.getCurrentCompetitor();\n    }\n}\n","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable, Subject } from \"rxjs\";\nimport { EventScoreboardStatus, CurrentResult, SeriesScores } from \"../interfaces\";\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ScoreService {\n    constructor(private http: HttpClient) { }\n\n    private currentCompetitor: Subject<CurrentResult> = new Subject<CurrentResult>();\n    private currentScoreboard: Subject<SeriesScores[]> = new Subject<SeriesScores[]>();\n\n    public getCurrentCompetitor(): Observable<CurrentResult> {\n        return this.currentCompetitor.asObservable();\n    }\n\n    public getCurrentScoreboard(): Observable<SeriesScores[]> {\n        return this.currentScoreboard.asObservable();\n    }\n\n    public updateScores(): void {\n        this.http.get('../assets/results/allSeries.json').subscribe(rawResult => {\n            var allSeries = rawResult as EventScoreboardStatus;\n            this.currentCompetitor.next(allSeries.currentResult);\n            this.currentScoreboard.next(allSeries.allSeries);\n        });\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\nimport { Config } from \"../interfaces\";\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ConfigService {\n    constructor(private http: HttpClient) { }\n\n    public currentConfig: Subject<Config> = new Subject<Config>();\n\n    private configLocation: string = '../assets/config.json';\n\n    public updateConfiguration(): void {\n        this.http.get(this.configLocation).subscribe(configRaw => {\n            this.currentConfig.next(configRaw as Config);\n        });\n    }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}