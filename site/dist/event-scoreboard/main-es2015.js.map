{"version":3,"sources":["./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/series-results/series-result.component.ts","./src/app/series-results/series-result.component.html","./src/app/app.module.ts","./src/app/shared/services/index.ts","./src/app/current-competitor/current-competitor.component.html","./src/app/current-competitor/current-competitor.component.ts","./src/app/shared/services/score.service.ts","./src/app/app-routing.module.ts","./src/app/shared/services/config.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription, timer } from 'rxjs';\nimport { CurrentResult, SeriesScores } from './shared/interfaces';\nimport { ConfigService, ScoreService } from './shared/services';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  private subscription: Subscription = new Subscription();\n\n  title = 'event-scoreboard';\n\n  selectedIndex: number = 0;\n  selectedSeries: SeriesScores | undefined;\n  currentCompetitor: CurrentResult | undefined;\n\n  loadedResults: SeriesScores[] = [];\n\n  constructor(private scoreService: ScoreService, private configService: ConfigService) { }\n\n  ngOnInit(): void {\n\n    this.configService.updateConfiguration();\n\n    this.configService.currentConfig.subscribe(config => {\n      this.scoreService.updateScores();\n      this.advanceSeries();\n      this.subscription.add(timer(0, config.seriesChangeTime).subscribe(n => this.advanceSeries()));\n      this.subscription.add(timer(0, config.backgroundUpdateTime).subscribe(n => this.scoreService.updateScores()));\n    });\n\n    this.selectedSeries = undefined;\n\n    this.listenForScoreboardChanges();\n  }\n\n  public ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  private listenForScoreboardChanges() {\n    this.scoreService.getCurrentScoreboard().subscribe(all => {\n      all.forEach(resultDto => {\n        const match = this.loadedResults.find(s => s.seriesName === resultDto.seriesName)\n        if (match) {\n          match.results = resultDto.results;\n        } else {\n          this.loadedResults.push(resultDto);\n        }\n      });\n    });\n  }\n\n  advanceSeries() {\n    console.log('Advancing');\n    if (this.loadedResults.length === 0) {\n      console.log('No results found.');\n      this.selectedSeries = undefined;\n      return;\n    }\n    this.selectedIndex = (this.selectedIndex + 1) % this.loadedResults.length;\n    this.selectedSeries = this.loadedResults[this.selectedIndex];\n  }\n\n}\n","<app-series-result [result]=\"selectedSeries\"></app-series-result>\n\n<app-current-competitor></app-current-competitor>\n","import { Component, Input } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SeriesScores } from '../shared/interfaces';\nimport { ScoreService } from '../shared/services';\n\n@Component({\n    selector: 'app-series-result',\n    templateUrl: './series-result.component.html',\n    styleUrls: []\n})\nexport class SeriesResultComponent {\n    public showResults: Observable<boolean>;\n\n    @Input() result: SeriesScores | undefined;\n\n    public constructor(private scoreService: ScoreService) {\n        this.showResults = this.scoreService.getCurrentCompetitor().pipe(map(m => !m || !m.isActive));\n    }\n}\n","<div *ngIf=\"(showResults | async)\">\n    <h1>{{result?.seriesName}}</h1>\n\n    <li *ngFor=\"let resultRow of result?.results\">\n        {{resultRow}}\n    </li>\n\n</div>\n","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CurrentCompetitorComponent } from './current-competitor/current-competitor.component';\nimport { SeriesResultComponent } from './series-results/series-result.component';\nimport { ConfigService } from './shared/services/config.service';\nimport { ScoreService } from './shared/services/score.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SeriesResultComponent,\n    CurrentCompetitorComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule\n  ],\n  providers: [\n    ScoreService,\n    ConfigService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export * from 'src/app/shared/services/config.service';\nexport * from 'src/app/shared/services/score.service';\n","<div *ngIf=\"(currentResult | async)?.isActive\">\n    {{(currentResult | async)?.participant}}\n</div>\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CurrentResult } from '../shared/interfaces';\nimport { ScoreService } from '../shared/services';\n\n@Component({\n    selector: 'app-current-competitor',\n    templateUrl: './current-competitor.component.html',\n    styleUrls: []\n})\nexport class CurrentCompetitorComponent implements OnInit, OnDestroy {\n    public currentResult: Observable<CurrentResult>;\n\n    public constructor(private scoreService: ScoreService) {\n        this.currentResult = this.scoreService.getCurrentCompetitor();\n    }\n\n    ngOnInit(): void {\n    }\n\n    public ngOnDestroy(): void {\n    }\n}\n","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable, Subject } from \"rxjs\";\nimport { EventScoreboardStatus, CurrentResult, SeriesScores } from \"../interfaces\";\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ScoreService {\n    constructor(private http: HttpClient) { }\n\n    private currentCompetitor: Subject<CurrentResult> = new Subject<CurrentResult>();\n    private currentScoreboard: Subject<SeriesScores[]> = new Subject<SeriesScores[]>();\n\n    public getCurrentCompetitor(): Observable<CurrentResult> {\n        return this.currentCompetitor.asObservable();\n    }\n\n    public getCurrentScoreboard(): Observable<SeriesScores[]> {\n        return this.currentScoreboard.asObservable();\n    }\n\n    public updateScores(): void {\n        this.http.get('../assets/results/allSeries.json').subscribe(rawResult => {\n            var allSeries = rawResult as EventScoreboardStatus;\n            this.currentCompetitor.next(allSeries.currentResult);\n            this.currentScoreboard.next(allSeries.allSeries);\n        });\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\nimport { Config } from \"../interfaces\";\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ConfigService {\n    constructor(private http: HttpClient) { }\n\n    public currentConfig: Subject<Config> = new Subject<Config>();\n\n    private configLocation: string = '../assets/config.json';\n\n    public updateConfiguration(): void {\n        this.http.get(this.configLocation).subscribe(configRaw => {\n            this.currentConfig.next(configRaw as Config);\n        });\n    }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}